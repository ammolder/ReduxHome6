{"version":3,"sources":["components/Button/Button.module.css","components/TackCounter/TackCounter.module.css","components/TaskForm/TaskForm.module.css","components/TaskList/TaskList.module.css","components/Layout/Layout.module.css","components/StatusFilter/StatusFilter.module.css","redux/constants.js","redux/reducer.js","redux/store.js","components/Layout/Layout.jsx","components/Button/Button.jsx","components/StatusFilter/StatusFilter.js","redux/actions.js","components/TackCounter/TackCounter.js","components/AppBar/AppBar.jsx","components/TaskForm/TaskForm.js","components/Task/Task.js","components/TaskList/TaskList.js","components/App.js","index.js","components/AppBar/AppBar.module.css","components/Task/Task.module.css"],"names":["module","exports","statusFilters","Object","freeze","all","active","completed","tasksInitialState","id","text","filtersInitialState","status","rootReducer","combineReducers","tasks","state","action","type","payload","filter","task","map","filters","enhancer","devToolsEnhancer","store","createStore","Layout","children","className","css","container","Button","selected","otherProps","clsx","btn","isSelected","StatusFilter","dispatch","useDispatch","handleFilterChange","useSelector","wrapper","onClick","TaskCounter","count","reduce","acc","AppBar","section","title","TaskForm","form","onSubmit","event","preventDefault","target","elements","value","nanoid","reset","field","name","placeholder","Task","checkbox","checked","onChange","size","TaskList","visibleTasks","statusFilter","console","log","getVisibleTasks","list","listItem","App","ReactDOM","createRoot","document","getElementById","render","StrictMode"],"mappings":"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","file":"static/js/main.a03aad30.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"btn\":\"Button_btn__3xaJM\",\"isSelected\":\"Button_isSelected__2JVMn\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"text\":\"TackCounter_text__3GsZE\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"form\":\"TaskForm_form__1kzwH\",\"field\":\"TaskForm_field__8trCg\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"list\":\"TaskList_list__2xVr5\",\"listItem\":\"TaskList_listItem__XeAAN\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"Layout_container__1nNA4\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"wrapper\":\"StatusFilter_wrapper__1VEdi\"};","export const statusFilters = Object.freeze({\n  all: 'all',\n  active: 'active',\n  completed: 'completed',\n});\n","// Імпортуємо функцію композиції редюсерів\nimport { combineReducers } from 'redux';\nimport { statusFilters } from './constants';\n\n// Код редюсерів tasksReducer та filtersReducer\nconst tasksInitialState = [\n  { id: 0, text: 'Learn HTML and CSS', completed: true },\n  { id: 1, text: 'Get good at JavaScript', completed: true },\n  { id: 2, text: 'Master React', completed: false },\n  { id: 3, text: 'Discover Redux', completed: false },\n  { id: 4, text: 'Build amazing apps', completed: false },\n];\n\n// Відповідає лише за оновлення властивості tasks\n// Тепер значенням параметра state буде масив завдань\nconst tasksReducer = (state = tasksInitialState, action) => {\n  switch (action.type) {\n    case 'tasks/addTask':\n      return [...state, action.payload];\n    case 'tasks/deleteTask':\n      return state.filter(task => task.id !== action.payload);\n    case 'tasks/toggleCompleted':\n      return state.map(task => {\n        if (task.id !== action.payload) {\n          return task;\n        }\n        return { ...task, completed: !task.completed };\n      });\n    default:\n      return state;\n  }\n};\nconst filtersInitialState = {\n  status: statusFilters.all,\n};\n// Відповідає лише за оновлення властивості filters\n// Тепер значенням параметра state буде об'єкт фільтрів\nconst filtersReducer = (state = filtersInitialState, action) => {\n  switch (action.type) {\n    case 'filters/setStatusFilter':\n      return {\n        ...state,\n        status: action.payload,\n      };\n    default:\n      return state;\n  }\n};\n\nexport const rootReducer = combineReducers({\n  tasks: tasksReducer,\n  filters: filtersReducer,\n});\n// export const rootReducer = (state = {}, action) => {\n//   // Повертаємо об'єкт стану\n//   return {\n//     // Обом редюсерам передаємо тільки частину стану, за яку вони відповідають.\n//     tasks: tasksReducer(state.tasks, action),\n//     filters: filtersReducer(state.filters, action),\n//   };\n// };\n\n// ОБШИРНИЙ ЗАПИС!!!\n// const initialState = {\n//   tasks: [\n//     { id: 0, text: 'Learn HTML and CSS', completed: true },\n//     { id: 1, text: 'Get good at JavaScript', completed: true },\n//     { id: 2, text: 'Master React', completed: false },\n//     { id: 3, text: 'Discover Redux', completed: false },\n//     { id: 4, text: 'Build amazing apps', completed: false },\n//   ],\n//   filters: {\n//     status: statusFilters.all,\n//   },\n// };\n\n// // Використовуємо initialState як значення стану за умовчанням\n// export const rootReducer = (state = initialState, action) => {\n//   // Редюсер розрізняє екшени за значенням властивості type\n//   switch (action.type) {\n//     // Залежно від типу екшену виконуватиметься різна логіка\n//     case 'tasks/addTask':\n//       return {\n//         ...state,\n//         tasks: [...state.tasks, action.payload],\n//       };\n//     case 'tasks/deleteTask':\n//       return {\n//         ...state,\n//         tasks: state.tasks.filter(task => task.id !== action.payload),\n//       };\n//     case 'tasks/toggleCompleted':\n//       return {\n//         ...state,\n//         tasks: state.tasks.map(task => {\n//           if (task.id !== action.payload) {\n//             return task;\n//           }\n//           return {\n//             ...task,\n//             completed: !task.completed,\n//           };\n//         }),\n//       };\n//     case 'filters/setStatusFilter':\n//       return {\n//         ...state,\n//         filters: {\n//           ...state.filters,\n//           status: action.payload,\n//         },\n//       };\n//     default:\n//       // Кожен редюсер отримує всі екшени, відправлені в стор.\n//       // Якщо редюсер не повинен обробляти якийсь тип екшену,\n//       // необхідно повернути наявний стан без змін.\n//       return state;\n//   }\n// };\n","// import { createStore } from 'redux';\n// import { devToolsEnhancer } from '@redux-devtools/extension';\n\n// // Початкове значення стану Redux для кореневого редюсера,\n// // якщо не передати параметр preloadedState.\n// const initialState = {\n//   tasks: [\n//     { id: 0, text: 'Learn HTML and CSS', completed: true },\n//     { id: 1, text: 'Get good at JavaScript', completed: true },\n//     { id: 2, text: 'Master React', completed: false },\n//     { id: 3, text: 'Discover Redux', completed: false },\n//     { id: 4, text: 'Build amazing apps', completed: false },\n//   ],\n//   filters: {\n//     status: 'all',\n//   },\n// };\n\n// // Поки що використовуємо редюсер який\n// // тільки повертає отриманий стан\n// const rootReducer = (state = initialState, action) => {\n//   return state;\n// };\n\n// // Створюємо розширення стора, щоб додати інструменти розробника\n// const enhancer = devToolsEnhancer();\n\n// export const store = createStore(rootReducer, enhancer);\n\nimport { createStore } from 'redux';\nimport { devToolsEnhancer } from '@redux-devtools/extension';\nimport { rootReducer } from './reducer';\nconst enhancer = devToolsEnhancer();\nexport const store = createStore(rootReducer, enhancer);\n","import css from './Layout.module.css';\n\nexport const Layout = ({ children }) => {\n  return <main className={css.container}>{children}</main>;\n};\n","import clsx from 'clsx';\nimport css from './Button.module.css';\n\nexport const Button = ({\n  selected = false,\n  type = 'button',\n  children,\n  ...otherProps\n}) => {\n  return (\n    <button\n      className={clsx(css.btn, {\n        [css.isSelected]: selected,\n      })}\n      type={type}\n      {...otherProps}\n    >\n      {children}\n    </button>\n  );\n};\n","// Імпортуємо хук\nimport { useSelector, useDispatch } from 'react-redux';\n// Імпортуємо генератор екшену\nimport { setStatusFilter } from 'redux/actions';\n// Імпортуємо об'єкт значень фільтра\nimport { statusFilters } from 'redux/constants';\nimport { Button } from 'components/Button/Button';\nimport css from './StatusFilter.module.css';\n\nexport const StatusFilter = () => {\n  // Отримуємо посилання на функцію відправки екшенів\n  const dispatch = useDispatch();\n\n  // Викликаємо генератор екшену та передаємо значення фільтра\n  // Відправляємо результат - екшен зміни фільтра\n  const handleFilterChange = filter => dispatch(setStatusFilter(filter));\n\n  // Отримуємо значення фільтра із стану Redux\n  const filter = useSelector(state => state.filters.status);\n\n  return (\n    <div className={css.wrapper}>\n      <Button\n        selected={filter === statusFilters.all}\n        onClick={() => handleFilterChange(statusFilters.all)}\n      >\n        All\n      </Button>\n      <Button\n        selected={filter === statusFilters.active}\n        onClick={() => handleFilterChange(statusFilters.active)}\n      >\n        Active\n      </Button>\n      <Button\n        selected={filter === statusFilters.completed}\n        onClick={() => handleFilterChange(statusFilters.completed)}\n      >\n        Completed\n      </Button>\n    </div>\n  );\n};\n","import { nanoid } from 'nanoid';\n\nexport const addTask = text => {\n  return {\n    type: 'tasks/addTask',\n    payload: {\n      id: nanoid(),\n      completed: false,\n      text,\n    },\n  };\n};\n\nexport const deleteTask = taskId => {\n  return {\n    type: 'tasks/deleteTask',\n    payload: taskId,\n  };\n};\n\nexport const toggleCompleted = taskId => {\n  return {\n    type: 'tasks/toggleCompleted',\n    payload: taskId,\n  };\n};\n\nexport const setStatusFilter = value => {\n  return {\n    type: 'filters/setStatusFilter',\n    payload: value,\n  };\n};\n","// Імпортуємо хук\nimport { useSelector } from 'react-redux';\nimport css from './TackCounter.module.css';\n\nexport const TaskCounter = () => {\n  // Отримуємо масив завдань із стану Redux\n  const tasks = useSelector(state => state.tasks);\n\n  const count = tasks.reduce(\n    (acc, task) => {\n      if (task.completed) {\n        acc.completed += 1;\n      } else {\n        acc.active += 1;\n      }\n      return acc;\n    },\n    { active: 0, completed: 0 }\n  );\n\n  return (\n    <div>\n      <p className={css.text}>Active: {count.active}</p>\n      <p className={css.text}>Completed: {count.completed}</p>\n    </div>\n  );\n};\n","import { StatusFilter } from 'components/StatusFilter/StatusFilter';\nimport { TaskCounter } from 'components/TackCounter/TackCounter';\nimport css from './AppBar.module.css';\n\nexport const AppBar = () => {\n  return (\n    <header className={css.wrapper}>\n      <section className={css.section}>\n        <h2 className={css.title}>Tasks</h2>\n        <TaskCounter />\n      </section>\n      <section className={css.section}>\n        <h2 className={css.title}>Filter by status</h2>\n        <StatusFilter />\n      </section>\n    </header>\n  );\n};\n","// Імпортуємо хук\nimport { useDispatch } from 'react-redux';\n// Імпортуємо генератор екшену\nimport { addTask } from 'redux/actions';\nimport { Button } from 'components/Button/Button';\nimport css from './TaskForm.module.css';\n\nexport const TaskForm = () => {\n  // Отримуємо посилання на функцію відправки екшенів\n  const dispatch = useDispatch();\n\n  const handleSubmit = event => {\n    event.preventDefault();\n    const form = event.target;\n    // Викликаємо генератор екшену та передаємо текст завдання для поля payload\n    // Відправляємо результат – екшен створення завдання\n    dispatch(addTask(form.elements.text.value));\n    form.reset();\n  };\n\n  return (\n    <form className={css.form} onSubmit={handleSubmit}>\n      <input\n        className={css.field}\n        type=\"text\"\n        name=\"text\"\n        placeholder=\"Enter task text...\"\n      />\n      <Button type=\"submit\">Add task</Button>\n    </form>\n  );\n};\n","// Імпортуємо хук\nimport { useDispatch } from 'react-redux';\n// Імпортуємо генератор екшену\nimport { deleteTask, toggleCompleted } from 'redux/actions';\nimport { MdClose } from 'react-icons/md';\nimport css from './Task.module.css';\n\nexport const Task = ({ task }) => {\n  // Отримуємо посилання на функцію відправки екшенів\n  const dispatch = useDispatch();\n\n  // Викликаємо генератор екшену та передаємо ідентифікатор завдання\n  // Відправляємо результат - екшен видалення завдання\n  const handleDelete = () => dispatch(deleteTask(task.id));\n\n  // Викликаємо генератор екшену та передаємо ідентифікатор завдання\n  // Відправляємо результат - екшен перемикання статусу завдання\n  const handleToggle = () => dispatch(toggleCompleted(task.id));\n\n  return (\n    <div className={css.wrapper}>\n      <input\n        type=\"checkbox\"\n        className={css.checkbox}\n        checked={task.completed}\n        onChange={handleToggle}\n      />\n      <p className={css.text}>{task.text}</p>\n      <button className={css.btn} type=\"button\" onClick={handleDelete}>\n        <MdClose size={24} />\n      </button>\n    </div>\n  );\n};\n","// Імпортуємо хук\nimport { useSelector } from 'react-redux';\nimport { Task } from 'components/Task/Task';\n// Імпортуємо об'єкт значень фільтра\nimport { statusFilters } from 'redux/constants';\nimport css from './TaskList.module.css';\n\nconst getVisibleTasks = (tasks, statusFilter) => {\n  console.log('tasks :', tasks);\n  console.log('statusFilter :', statusFilter);\n  switch (statusFilter) {\n    case statusFilters.active:\n      return tasks.filter(task => !task.completed);\n    case statusFilters.completed:\n      return tasks.filter(task => task.completed);\n    default:\n      return tasks;\n  }\n};\n\nexport const TaskList = () => {\n  // Отримуємо масив завдань із стану Redux\n  const tasks = useSelector(state => state.tasks);\n  // Отримуємо значення фільтра із стану Redux\n  const statusFilter = useSelector(state => state.filters.status);\n  // Обчислюємо масив завдань, які необхідно відображати в інтерфейсі\n  const visibleTasks = getVisibleTasks(tasks, statusFilter);\n\n  return (\n    <ul className={css.list}>\n      {visibleTasks.map(task => (\n        <li className={css.listItem} key={task.id}>\n          <Task task={task} />\n        </li>\n      ))}\n    </ul>\n  );\n};\n","import { Layout } from 'components/Layout/Layout';\nimport { AppBar } from 'components/AppBar/AppBar';\nimport { TaskForm } from 'components/TaskForm/TaskForm';\nimport { TaskList } from 'components/TaskList/TaskList';\n\nexport const App = () => {\n  return (\n    <Layout>\n      <AppBar />\n      <TaskForm />\n      <TaskList />\n    </Layout>\n  );\n};\n","import React from 'react';\nimport ReactDOM from 'react-dom/client';\nimport { Provider } from 'react-redux';\nimport { store } from './redux/store';\nimport { App } from 'components/App';\nimport './index.css';\n\nReactDOM.createRoot(document.getElementById('root')).render(\n  <React.StrictMode>\n    <Provider store={store}>\n      <App />\n    </Provider>\n  </React.StrictMode>\n);\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"wrapper\":\"AppBar_wrapper__21lfN\",\"section\":\"AppBar_section__3Iy4s\",\"title\":\"AppBar_title__JfHv9\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"wrapper\":\"Task_wrapper__1Un4J\",\"text\":\"Task_text__7szr-\",\"btn\":\"Task_btn__2cnNo\",\"checkbox\":\"Task_checkbox__1kBaq\"};"],"sourceRoot":""}